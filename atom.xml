<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-25T08:06:41.056Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/06/07/Hibernate5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/06/07/Hibernate5总结/</id>
    <published>2018-06-07T02:55:04.157Z</published>
    <updated>2018-06-25T08:06:41.056Z</updated>
    
    <content type="html"><![CDATA[<p>Hibernate5框架的总结</p><p>[TOC]</p><hr><h2 id="Hibernate的概述"><a href="#Hibernate的概述" class="headerlink" title="Hibernate的概述"></a>Hibernate的概述</h2><h3 id="1-什么是Hibernate"><a href="#1-什么是Hibernate" class="headerlink" title="1.什么是Hibernate?"></a>1.什么是Hibernate?</h3><p>Hibernate是一个持久层的ORM框架,对JDBC做了封装.</p><p>###2.什么是<strong>ORM</strong>?</p><p>ORM:object relation mapping—对象关联映射</p><h3 id="3-为什么使用Hibernate框架"><a href="#3-为什么使用Hibernate框架" class="headerlink" title="3.为什么使用Hibernate框架"></a>3.为什么使用Hibernate框架</h3><p>1.对JDBC做了轻量级封装</p><p>2.优秀的ORM实现,简化了DAO的编码</p><p>3.性能好,支持很多关系型数据库</p><p>4.可扩展性强</p><p>具体见–<a href="https://baike.baidu.com/item/Hibernate/206989?fr=aladdin" target="_blank" rel="noopener">Hibernate百度百科</a></p><hr><h2 id="Hibernate的入门"><a href="#Hibernate的入门" class="headerlink" title="Hibernate的入门"></a>Hibernate的入门</h2><h3 id="1-创建项目-导入相应的jar包"><a href="#1-创建项目-导入相应的jar包" class="headerlink" title="1.创建项目,导入相应的jar包"></a>1.创建项目,导入相应的jar包</h3><ul><li>hibernate核心包</li><li>日志记录包</li><li>数据库驱动包</li></ul><h3 id="2-创建相应的数据库和表"><a href="#2-创建相应的数据库和表" class="headerlink" title="2.创建相应的数据库和表"></a>2.创建相应的数据库和表</h3><h3 id="3-编写POJO类"><a href="#3-编写POJO类" class="headerlink" title="3.编写POJO类"></a>3.编写POJO类</h3><ul><li>普通的javaBean类</li></ul><h3 id="4-编写POJO对应的映射配置文件–xxx-hbm-xml"><a href="#4-编写POJO对应的映射配置文件–xxx-hbm-xml" class="headerlink" title="4.编写POJO对应的映射配置文件–xxx.hbm.xml"></a>4.编写POJO对应的映射配置文件–xxx.hbm.xml</h3><ul><li style="list-style: none"><input type="checkbox"> 映射id主键</li><li style="list-style: none"><input type="checkbox"> 映射其它属性</li><li style="list-style: none"><input type="checkbox"> 映射级联属性(如多对一,一对多,多对多,一对一)</li><li style="list-style: none"><input type="checkbox"> Hibernate的主键生成策略<ul><li>native(自动按照方言来实现自增长)</li><li>identity(mysql主键生成方式)</li><li>sequence(oracle主键生成方式)</li><li>assigned(自然主键–如身份证编号等等)</li><li>uuid(字符串类型的id)</li></ul></li></ul><h3 id="5-编写hibernate核心配置文件"><a href="#5-编写hibernate核心配置文件" class="headerlink" title="5.编写hibernate核心配置文件"></a>5.编写hibernate核心配置文件</h3><ul><li><p>[ ] 配置数据源属性(例如url,driverclass等等)</p></li><li><p>[ ] 配置hibernate相关属性</p><ul><li><p>格式化sql</p></li><li><p>控制打印sql语句</p></li><li><p>Hibernate中设置与当前线程绑定的session的使用</p><ul><li>session对象的生命周期和本地线程绑定</li><li>自动关闭,事务的开启关闭也随本地线程开启而开启,关闭而关闭</li></ul></li><li><p>设置连接池</p></li><li><p>设置事务隔离级别</p><p>read-uncommitted—2</p><pre><code>    不能解决任何问题,安全性最低,性能最高read-committed-----4    sql-server,oracle默认级别repeatable-read----8    mysql默认级别serializable------16    能解决任何问题,性能最低,安全性最高</code></pre><p>​</p></li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 加载映射文件</li></ul><hr><p>  ​</p><h2 id="Hibernate相关API"><a href="#Hibernate相关API" class="headerlink" title="Hibernate相关API"></a>Hibernate相关API</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a><strong><em>Configuration</em></strong></h3><h3 id="sessionFactory"><a href="#sessionFactory" class="headerlink" title="sessionFactory"></a><strong><em>sessionFactory</em></strong></h3><h3 id="session"><a href="#session" class="headerlink" title="session"></a><strong><em>session</em></strong></h3><hr><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用hibernate.cfg.xml配置核心配置文件的做法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*第一种  和对应的类不在同一个包下</span></span><br><span class="line"><span class="comment">Configuration configuration = new Configuration();</span></span><br><span class="line"><span class="comment">configuration.addResource("com/itheima/domain/Customer.hbm.xml");*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*第二种   和对应的类在同一个包下</span></span><br><span class="line"><span class="comment">Configuration configuration = new Configuration();</span></span><br><span class="line"><span class="comment">configuration.addClass(Customer.class);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三种     第一步:获取核心配置文件(核心配置文件已经加载了映射文件,这是第三种(推荐的做法))</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//获取sessionFactory  相当于JDBC的连接池</span></span><br><span class="line">        SessionFactory sessionFactory = configuration.buildSessionFactory();</span><br><span class="line">        <span class="comment">//通过sessionFactory获得session 相当于JDBC的连接</span></span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line">        Transaction transaction = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            transaction = session.beginTransaction();</span><br><span class="line">            <span class="comment">//操作对象</span></span><br><span class="line">            Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">            customer.setIndustry(<span class="string">"互联网行业"</span>);</span><br><span class="line">            customer.setLevel(<span class="string">"1"</span>);</span><br><span class="line">            customer.setMobile(<span class="string">"18888888888"</span>);</span><br><span class="line">            customer.setName(<span class="string">"马腾"</span>);</span><br><span class="line">            customer.setPhone(<span class="string">"021-88888"</span>);</span><br><span class="line">            customer.setSource(<span class="string">"网上搜查"</span>);</span><br><span class="line">            Serializable id = session.save(customer);</span><br><span class="line">            System.out.println(id);</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            transaction.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="session的crud"><a href="#session的crud" class="headerlink" title="session的crud:"></a><strong><em>session的crud</em></strong>:</h3><ul><li><p>save</p></li><li><p>delete</p></li><li><p>update</p></li><li><p>get(立即加载)</p></li><li><p>load(延迟加载)</p><hr><p>​</p></li></ul><h2 id="Hibernate的持久化类"><a href="#Hibernate的持久化类" class="headerlink" title="Hibernate的持久化类"></a>Hibernate的持久化类</h2><h3 id="持久化类的定义及编写规则"><a href="#持久化类的定义及编写规则" class="headerlink" title="持久化类的定义及编写规则"></a>持久化类的定义及编写规则</h3><h4 id="持久化类的定义"><a href="#持久化类的定义" class="headerlink" title="持久化类的定义:"></a>持久化类的定义:</h4><p>定义:一个javaBean类对应着一个映射文件,与数据库表建立联系</p><h4 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则:"></a>持久化类的编写规则:</h4><p>1.不能用final修饰,不然无法通过代理类实现延迟加载<br>    2.提供私有属性,提供公益的get.set方法<br>    3.属性尽量用包装类型<br>    4.提供特定标识OID,与数据库表的主键对应<br>    5.提供无参构造,用来为hibernate提供反射</p><h3 id="持久化类的三种状态及相互转化"><a href="#持久化类的三种状态及相互转化" class="headerlink" title="持久化类的三种状态及相互转化"></a>持久化类的三种状态及相互转化</h3><table><thead><tr><th></th><th>瞬时态</th><th>持久态</th><th>脱管态</th></tr></thead><tbody><tr><td>OID</td><td>无</td><td>有</td><td>有</td></tr><tr><td>session管理</td><td>无</td><td>有</td><td>无</td></tr></tbody></table><p><img src="file:///C:\Users\coldwind\AppData\Local\Temp\ksohtml\wps46F8.tmp.jpg" alt="mg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试hibernate实体类对象的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.OpenSession();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        <span class="comment">//创建实体类</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();<span class="comment">//实体类对象的瞬时态,没有id,没有加入session管理</span></span><br><span class="line"></span><br><span class="line">        customer.setId(<span class="number">1L</span>);<span class="comment">//设置id,变为脱管态,有id,没有加入session管理</span></span><br><span class="line">        customer.setName(<span class="string">"李世民3"</span>);</span><br><span class="line">        customer.setPhone(<span class="string">"188888888"</span>);</span><br><span class="line">        customer.setIndustry(<span class="string">"唐朝"</span>);</span><br><span class="line">        customer.setLevel(<span class="string">"一等客户"</span>);</span><br><span class="line">        customer.setMobile(<span class="string">"66666666"</span>);</span><br><span class="line">        customer.setSource(<span class="string">"书"</span>);</span><br><span class="line">        session.save(customer);<span class="comment">//此时customer变为持久态,可以自动更新</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//事务提交</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();<span class="comment">//此时customer变成了脱管态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试hibernate实体类对象的状态之间相互的转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//创建实体类</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();<span class="comment">//实体类对象的瞬时态,没有id,没有加入session管理</span></span><br><span class="line">    </span><br><span class="line">    customer.setId(<span class="number">5L</span>);<span class="comment">//当设置的id不存在的时候,此时customer为瞬时态:没有OID,没有加入session</span></span><br><span class="line">    <span class="comment">//customer.setId(1L);//当设置的id存在的时候,此时customer为脱管态:有OID,没有加入session</span></span><br><span class="line">    customer.setName(<span class="string">"张飞"</span>);</span><br><span class="line">    customer.setIndustry(<span class="string">"三国"</span>);</span><br><span class="line">    </span><br><span class="line">    session.save(customer);<span class="comment">//调用save或者update此时customer变为持久态,可以自动更新</span></span><br><span class="line">    <span class="comment">//saveOrUpdate方法:当customer为瞬时态则调用save方法,当customer为脱管态则调用update方法</span></span><br><span class="line">    <span class="comment">//session.delete(customer);//customer直接从持久态变为瞬时态</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//事务提交</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();<span class="comment">//此时customer变成了脱管态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试clear方法:清除session所有对象,将customer持久态转化为脱管态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    </span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">2L</span>);<span class="comment">//持久态</span></span><br><span class="line">    session.clear();<span class="comment">//清除session的所有对象</span></span><br><span class="line">    System.out.println(customer);<span class="comment">//customer变为脱管态</span></span><br><span class="line">    </span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试evict方法:清除session某个对象,将customer持久态转化为脱管态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">evict</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    </span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">2L</span>);<span class="comment">//持久态</span></span><br><span class="line">    session.evict(customer);<span class="comment">//清除session的customer</span></span><br><span class="line">    System.out.println(customer);<span class="comment">//customer变为脱管态</span></span><br><span class="line">    </span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:当对象为持久态的时候,可以自动更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">auto_Update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    </span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">2L</span>);<span class="comment">//持久态</span></span><br><span class="line">    customer.setName(<span class="string">"关羽"</span>);<span class="comment">//customer已经是持久态,不需要调用session的update,就能更改表,自动更新</span></span><br><span class="line">    </span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试主键生成策略---increment  hibernate内部的自动增长机制,会先查询表中的MAX(id),然后插入数据</span></span><br><span class="line"><span class="comment">     * 缺点:线程不安全,多线程存储数据的时候会出现问题</span></span><br><span class="line"><span class="comment">     * 应用debug模式,两个线程同时添加数据,第一次可以添加成功,第二次就因为id一样就报错:Duplicate entry key 重复的主键error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.OpenSession();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        <span class="comment">//创建实体类</span></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setName(<span class="string">"陆小凤"</span>);</span><br><span class="line"></span><br><span class="line">        session.save(customer);<span class="comment">//当保存数据的时候,会先查询数据库中Max(id),然后再加一,然后再添加进去</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:测试主键生成策略 uuid,随机生成uuid格式的主键</span></span><br><span class="line"><span class="comment">     * 要求:持久化类的id主键为string类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">UUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//创建实体类</span></span><br><span class="line">    </span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setName(<span class="string">"诸葛亮"</span>);<span class="comment">//得到4028a68163ac13970163ac13991d0000的uuid形式的id</span></span><br><span class="line">    </span><br><span class="line">    session.save(customer);</span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:测试主键生成策略 assigned,即自然主键,自己手动设置个人信息唯一的id,如:身份证,如登录id+时间戳</span></span><br><span class="line"><span class="comment">     * 要求:持久化类的id主键为string类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">assigned</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Session session = HibernateUtils.OpenSession();</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//创建实体类</span></span><br><span class="line">    </span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setId(<span class="number">2018052921301515L</span>);</span><br><span class="line">    customer.setName(<span class="string">"赵云"</span>);<span class="comment">//得到4028a68163ac13970163ac13991d0000的uuid形式的id</span></span><br><span class="line">    </span><br><span class="line">    session.save(customer);</span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hibernate的缓存和快照"><a href="#Hibernate的缓存和快照" class="headerlink" title="Hibernate的缓存和快照"></a>Hibernate的缓存和快照</h2><h3 id="Hibernate的缓存机制"><a href="#Hibernate的缓存机制" class="headerlink" title="Hibernate的缓存机制"></a>Hibernate的缓存机制</h3><h4 id="Hibernate的一级缓存"><a href="#Hibernate的一级缓存" class="headerlink" title="Hibernate的一级缓存"></a>Hibernate的一级缓存</h4><p>第一次通过id向数据库查询,发送sql语句,然后将这个数据加载进缓存,之后的每一次访问这个数据就可以直接访问缓存来获得这个数据,不用发送sql语句查询数据库了(session未关闭的情况下).</p><p>生命周期:是session的生命周期,session一关闭,一级缓存就消失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo2</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存的存在:</span></span><br><span class="line"><span class="comment"> * 一级缓存:当第一次通过id向数据库查询数据时,hibernate会将id为key,对象为value存入session的缓存中</span></span><br><span class="line"><span class="comment"> *    第二次查询这个id数据的时候,就直接向缓存中拿这个key相应的对象即可(hibernate性能优化的一个方式)</span></span><br><span class="line"><span class="comment"> * 一级缓存的生命周期:当session关闭的时候,一级缓存就结束了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.OpenSession();</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">2L</span>);<span class="comment">//向数据库发送了sql查询语句</span></span><br><span class="line">System.out.println(customer);</span><br><span class="line">Customer customer2 = session.get(Customer.class, <span class="number">2L</span>);<span class="comment">//没有发送sql语句,直接从一级缓存中获取</span></span><br><span class="line">System.out.println(customer2);</span><br><span class="line"></span><br><span class="line">System.out.println(customer == customer2);<span class="comment">//打印出来为true,说明拿出来的对象是一样的</span></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试一级缓存的快照区:快照，是数据在内存中的副本，是数据库中数据在内存中的映射。</span></span><br><span class="line"><span class="comment"> * 当session加载了customer对象后,会为customer创建一个快照副本(快照区),当事务提交后(会刷出缓存)</span></span><br><span class="line"><span class="comment"> * 会比对快照区和一级缓存区,然后来比对哪些属性变化,然后向数据库发送update更新数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">snapShot</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.OpenSession();</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">2L</span>);</span><br><span class="line">customer.setName(<span class="string">"刘备2"</span>);</span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * session的生命周期和本地线程绑定:</span></span><br><span class="line"><span class="comment"> * 在核心配置文件中配置:&lt;!-- 设置与当前线程绑定的session --&gt;</span></span><br><span class="line"><span class="comment">&lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt;</span></span><br><span class="line"><span class="comment">这样一个线程结束,session会自动关闭,不用调用session.close手动关闭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();<span class="comment">//另一个方法调用getCurrentSession,得到的是同一个session</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">2L</span>);</span><br><span class="line">customer.setName(<span class="string">"刘备3"</span>);</span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hibernate的二级缓存"><a href="#Hibernate的二级缓存" class="headerlink" title="Hibernate的二级缓存"></a>Hibernate的二级缓存</h4><p><strong><em>sessionFactory</em></strong></p><h3 id="Hibernate的快照"><a href="#Hibernate的快照" class="headerlink" title="Hibernate的快照"></a>Hibernate的快照</h3><h4 id="快照的定义"><a href="#快照的定义" class="headerlink" title="快照的定义"></a>快照的定义</h4><p>定义:快照，是数据在内存中的副本，是数据库中数据在内存中的映射</p><h4 id="快照的原理"><a href="#快照的原理" class="headerlink" title="快照的原理"></a>快照的原理</h4><p>原理:当session缓存加载了一个对象的时候,会为这个对象的值类型复制存入一片快照区域,操作对象改变的时候只会改变session的缓存,不会改变快照区,当事务提交(刷出缓存)的时候,快照会和缓存去进行对比,如果不一样就会想数据库发送update语句,更新数据库变为缓存区一样的数据.</p><h2 id="Hibernate的三种查询方式"><a href="#Hibernate的三种查询方式" class="headerlink" title="Hibernate的三种查询方式"></a>Hibernate的三种查询方式</h2><h3 id="QBC查询"><a href="#QBC查询" class="headerlink" title="QBC查询"></a>QBC查询</h3><h3 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h3><h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Query;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SQLQuery;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.criterion.Restrictions;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo3</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试HQL查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*//查询所有数据----HQL查询的都是对象,不是数据库的表,是通过查询对象反射到操作数据库表</span></span><br><span class="line"><span class="comment">Query query = session.createQuery("from Customer");</span></span><br><span class="line"><span class="comment">//返回装有数据的list</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*//条件查询</span></span><br><span class="line"><span class="comment">Query query2 = session.createQuery("from Customer where name like ? and level=?");</span></span><br><span class="line"><span class="comment">//设置HQL的参数</span></span><br><span class="line"><span class="comment">query2.setParameter(0, "%刘%");</span></span><br><span class="line"><span class="comment">query2.setParameter(1, "一等客户");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list2 = query2.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list2) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分页查询----直接setFirstResult(角标)和setMaxResults(一页展示的数量)</span></span><br><span class="line">Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">query.setMaxResults(<span class="number">2</span>);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试QBC查询:完全面对对象,不用写sql语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QBC</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*//查询所有数据</span></span><br><span class="line"><span class="comment">Criteria criteria = session.createCriteria(Customer.class);</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//条件查询</span></span><br><span class="line">    <span class="comment">/*Criteria criteria = session.createCriteria(Customer.class);</span></span><br><span class="line"><span class="comment">//加入限制---即加入条件</span></span><br><span class="line"><span class="comment">criteria.add(Restrictions.like("name", "刘"));</span></span><br><span class="line"><span class="comment">criteria.add(Restrictions.eq("level", "一等客户"));</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">criteria.setFirstResult(<span class="number">0</span>);</span><br><span class="line">criteria.setMaxResults(<span class="number">2</span>);</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">transaction.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试SQL查询:写sql语句查询数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有数据</span></span><br><span class="line">SQLQuery sqlQuery = session.createSQLQuery(<span class="string">"select * from cst_customer"</span>);</span><br><span class="line">List&lt;Object[]&gt; list = sqlQuery.list();<span class="comment">//返回的不是customer对象,而是object数组(数据库字段和值的数组)</span></span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(objects[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SQLQuery sqlQuery2 = session.createSQLQuery(<span class="string">"select * from cst_customer"</span>);</span><br><span class="line">sqlQuery2.addEntity(Customer.class);<span class="comment">//可以通过这个方法,将数据封装在customer,然后遍历打印出来</span></span><br><span class="line">List&lt;Customer&gt; list2 = sqlQuery2.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list2) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="Hibernate的映射关系"><a href="#Hibernate的映射关系" class="headerlink" title="Hibernate的映射关系"></a>Hibernate的映射关系</h2><h3 id="Hibernate中的一对多映射-如一个客户有多个联系人"><a href="#Hibernate中的一对多映射-如一个客户有多个联系人" class="headerlink" title="Hibernate中的一对多映射(如一个客户有多个联系人)"></a>Hibernate中的一对多映射(如一个客户有多个联系人)</h3><ol><li>准备工作:创建表,创建持久化类,配置映射文件</li><li>级联保存<ul><li>保存客户,级联保存联系人(常用):在客户相对应的映射文件中的set标签加入属性cascade=”save-update”</li><li>保存联系人,级联保存客户:在联系人相对应的映射文件中的Many-to-one标签加入属性cascade=”save-update”</li></ul></li><li>级联删除<ul><li>删除客户,级联保存联系人(常用):在客户相对应的映射文件中的set标签加入属性cascade=”delete”</li><li>删除联系人,级联保存客户:在联系人相对应的映射文件中的Many-to-one标签加入属性cascade=”delete”</li></ul></li><li>放弃外键维护权<pre><code>例子:改变联系人的客户起源:建立双向关系会出现多余的update语句,但是为了能够更好的操作客户和联系人,需要建立双向关系解决办法:一般由一的一方放弃外键维护权,这样既不会产生多余的uodate语句,也能建立双向关系</code></pre></li></ol><h3 id="Hibernate的多对多映射"><a href="#Hibernate的多对多映射" class="headerlink" title="Hibernate的多对多映射"></a>Hibernate的多对多映射</h3><p>类似一对多的情形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coldwind</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateOneToManyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试级联和导航的关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>   <span class="title">relativeObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCust_name(<span class="string">"张艺谋"</span>);</span><br><span class="line"></span><br><span class="line">        LinkMan linkMan1 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan1.setLkm_name(<span class="string">"范冰冰"</span>);</span><br><span class="line">        LinkMan linkMan2 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan2.setLkm_name(<span class="string">"李晨"</span>);</span><br><span class="line">        LinkMan linkMan3 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">        linkMan3.setLkm_name(<span class="string">"李冰冰"</span>);</span><br><span class="line"></span><br><span class="line">        linkMan1.setCustomer(customer);</span><br><span class="line">        customer.getLinkMans().add(linkMan2);</span><br><span class="line">        customer.getLinkMans().add(linkMan3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//发出insert语句的条数 :4条</span></span><br><span class="line">       <span class="comment">// session.save(linkMan1);</span></span><br><span class="line">        <span class="comment">//发出insert语句的条数 :3条</span></span><br><span class="line">        session.save(customer);</span><br><span class="line">        <span class="comment">//发出insert语句的条数:1条</span></span><br><span class="line">       <span class="comment">// session.save(linkMan2);</span></span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:改变某个联系人的客户的时候,建立双向关系,会产生多余的sql语句,产生两条update语句</span></span><br><span class="line"><span class="comment">     * 但是开发中一般要建立双向关系:因为一个方法当以客户为参数的时候可以操作它的联系人</span></span><br><span class="line"><span class="comment">     *                                 一个方法以联系人为参数的时候可以操作它的客户</span></span><br><span class="line"><span class="comment">     * 为了既建立双向关系,又为了性能考虑不发送多余的update语句,一般都让一的那一方放弃主动权</span></span><br><span class="line"><span class="comment">     * 让一的一方放弃维护外键的关系,需要在一的一方即客户的一方映射文件中加入inverse=true,即可以被反转</span></span><br><span class="line"><span class="comment">     * 即主动放弃维护外键的权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>   <span class="title">inverseTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Customer customer = session.get(Customer.class, <span class="number">4L</span>);</span><br><span class="line">        LinkMan linkMan = session.get(LinkMan.class, <span class="number">9L</span>);</span><br><span class="line">        linkMan.setCustomer(customer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置客户的映射文件之后,这条代码其实是失效的,这样即使创建双方关系,也只发送一条update语句</span></span><br><span class="line">        customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Role;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate中多对多的关系映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coldwind</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateManyToManyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试多对多关系映射的级联保存:不能创建双向关系,中间表的联合主键会产生重复</span></span><br><span class="line"><span class="comment">     * Duplicate:重复的意思</span></span><br><span class="line"><span class="comment">     * Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '1-2' for key 'PRIMARY'</span></span><br><span class="line"><span class="comment">         at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span></span><br><span class="line"><span class="comment">         at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span></span><br><span class="line"><span class="comment">         at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span></span><br><span class="line"><span class="comment">         at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">manyToManyTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setUserName(<span class="string">"张三丰3"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setUserName(<span class="string">"长孙无忌3"</span>);</span><br><span class="line"></span><br><span class="line">        Role role1 = <span class="keyword">new</span> Role();</span><br><span class="line">        role1.setRoleName(<span class="string">"前台小姐姐3"</span>);</span><br><span class="line">        Role role2 = <span class="keyword">new</span> Role();</span><br><span class="line">        role2.setRoleName(<span class="string">"前台小哥哥3"</span>);</span><br><span class="line">        Role role3 = <span class="keyword">new</span> Role();</span><br><span class="line">        role3.setRoleName(<span class="string">"前台大叔叔3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//角色和用户创立关系</span></span><br><span class="line">        role2.getUsers().add(user1);</span><br><span class="line">        role2.getUsers().add(user2);</span><br><span class="line">        role3.getUsers().add(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户和角色创建关系</span></span><br><span class="line">        user1.getRoles().add(role2);</span><br><span class="line">        user1.getRoles().add(role3);</span><br><span class="line">        user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存角色和用户</span></span><br><span class="line">        session.save(user1);</span><br><span class="line">        session.save(user2);</span><br><span class="line">        <span class="comment">/*session.save(role1);</span></span><br><span class="line"><span class="comment">        session.save(role2);</span></span><br><span class="line"><span class="comment">        session.save(role3);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存角色,级联保存用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">saveRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setUserName(<span class="string">"张三丰2"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setUserName(<span class="string">"长孙无忌2"</span>);</span><br><span class="line"></span><br><span class="line">        Role role1 = <span class="keyword">new</span> Role();</span><br><span class="line">        role1.setRoleName(<span class="string">"前台小姐姐2"</span>);</span><br><span class="line">        Role role2 = <span class="keyword">new</span> Role();</span><br><span class="line">        role2.setRoleName(<span class="string">"前台小哥哥2"</span>);</span><br><span class="line">        Role role3 = <span class="keyword">new</span> Role();</span><br><span class="line">        role3.setRoleName(<span class="string">"前台大叔叔2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//角色和用户创立关系</span></span><br><span class="line">        role2.getUsers().add(user1);</span><br><span class="line">        role2.getUsers().add(user2);</span><br><span class="line">        role3.getUsers().add(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户和角色创建关系</span></span><br><span class="line">        user1.getRoles().add(role2);</span><br><span class="line">        user1.getRoles().add(role3);</span><br><span class="line">        user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">        session.save(role1);</span><br><span class="line">        session.save(role2);</span><br><span class="line">        session.save(role3);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除角色,级联删除用户,必须持久态的对象才能删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">deleteRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Role role1 = session.get(Role.class, <span class="number">16L</span>);</span><br><span class="line">        Role role2 = session.get(Role.class, <span class="number">17L</span>);</span><br><span class="line">        Role role3 = session.get(Role.class, <span class="number">18L</span>);</span><br><span class="line"></span><br><span class="line">        session.delete(role1);</span><br><span class="line">        session.delete(role2);</span><br><span class="line">        session.delete(role3);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户,级联删除角色,必须持久态的对象才能删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = session.get(User.class, <span class="number">9L</span>);</span><br><span class="line">        User user2 = session.get(User.class, <span class="number">10L</span>);</span><br><span class="line"></span><br><span class="line">        session.delete(user1);</span><br><span class="line">        session.delete(user2);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给用户添加角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">addRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = session.get(User.class, <span class="number">2L</span>);</span><br><span class="line">        Role role = session.get(Role.class, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        role.getUsers().add(user1);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给用户删除角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">deleteRoleFromUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = session.get(User.class, <span class="number">2L</span>);</span><br><span class="line">        Role role = session.get(Role.class, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意有没有哪一方放弃外键维护权</span></span><br><span class="line">        role.getUsers().remove(user1);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给用户选择角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">selectRole</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        User user1 = session.get(User.class, <span class="number">2L</span>);</span><br><span class="line">        Role role1 = session.get(Role.class, <span class="number">1L</span>);</span><br><span class="line">        Role role2 = session.get(Role.class, <span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意有没有哪一方放弃外键维护权</span></span><br><span class="line">        role2.getUsers().remove(user1);</span><br><span class="line">        role1.getUsers().add(user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hibernate的一对一映射"><a href="#Hibernate的一对一映射" class="headerlink" title="Hibernate的一对一映射"></a>Hibernate的一对一映射</h3><hr><h2 id="Hibernate的5种检索方式"><a href="#Hibernate的5种检索方式" class="headerlink" title="Hibernate的5种检索方式"></a>Hibernate的5种检索方式</h2><p>1.通过OID检索:get、load</p><p>2.通过对象导航检索</p><p>3.HQL检索</p><p>​    条件查询检索<br>        排序检索<br>        分页检索<br>        多表查询检索<br>        基本检索</p><p>4.QBC检索</p><p>​    基本检索<br>        分页检索<br>        多表查询检索<br>        条件查询检索<br>        排序检索<br>        离线查询检索</p><p>5.SQL检索</p><hr><h2 id="Hibernate的抓取策略"><a href="#Hibernate的抓取策略" class="headerlink" title="Hibernate的抓取策略"></a>Hibernate的抓取策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.hibernate.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> com.itheima.hibernate.utils.HibernateUtils;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hibernate的抓取策略:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> coldwind</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateCatchTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试:抓取策略</span></span><br><span class="line"><span class="comment">     * 默认是懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        <span class="comment">//发送select语句,查询客户</span></span><br><span class="line">        Customer customer = session.get(Customer.class, <span class="number">2L</span>);</span><br><span class="line">        <span class="comment">//发送select语句,查询联系人表</span></span><br><span class="line">        System.out.println(customer.getLinkMans());</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *fetch：控制查询语句的格式。</span></span><br><span class="line"><span class="comment">             select：默认值，发送一条select语句查询关联对象（立即和延迟通过lazy属性决定）</span></span><br><span class="line"><span class="comment">             join：发送一条迫切左外连接查询关联对象（lazy属性会忽略）</span></span><br><span class="line"><span class="comment">             subselect：发送一条子查询查询其关联对象（立即和延迟通过lazy属性决定）</span></span><br><span class="line"><span class="comment">     lazy：查询是否延迟的。</span></span><br><span class="line"><span class="comment">             true：默认值，延迟加载。</span></span><br><span class="line"><span class="comment">             false：不支持延迟加载，即立即加载。</span></span><br><span class="line"><span class="comment">             extra：极其懒惰</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            将customer映射文件的set的fetch属性改为join</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchTest02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//join：发送一条迫切左外连接查询关联对象（lazy属性会忽略）</span></span><br><span class="line">        Customer customer = session.get(Customer.class, <span class="number">3L</span>);</span><br><span class="line">        System.out.println(customer.getLinkMans());</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  将customer映射文件的set的fetch属性改为subselect(发送联合查询语句)(是否立即和lazy的配置有关)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchTest03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//subselect(发送子查询(嵌套查询)语句)</span></span><br><span class="line">        Customer customer = session.get(Customer.class, <span class="number">4L</span>);</span><br><span class="line">        System.out.println(customer.getLinkMans());</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询客户批量抓取联系人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchTest04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">        List&lt;Customer&gt; list = criteria.list();</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer.getCust_name());</span><br><span class="line">            <span class="keyword">for</span> (LinkMan linkMan : customer.getLinkMans()) &#123;</span><br><span class="line">                System.out.println(linkMan.getLkm_name());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.commit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchTest05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        <span class="comment">// 查询所有客户</span></span><br><span class="line">        List&lt;LinkMan&gt; list = session.createQuery(<span class="string">"from LinkMan"</span>).list();</span><br><span class="line">        <span class="keyword">for</span> (LinkMan linkMan : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">"联系人的名称:"</span>+linkMan.getLkm_name());</span><br><span class="line">            System.out.println(<span class="string">"客户的名称:"</span>+linkMan.getCustomer().getCust_name());</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hibernate5框架的总结&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Hibernate的概述&quot;&gt;&lt;a href=&quot;#Hibernate的概述&quot; class=&quot;headerlink&quot; title=&quot;Hibernate的概述&quot;&gt;&lt;/a&gt;Hibernate
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PageName</title>
    <link href="http://yoursite.com/2018/06/04/PageName/"/>
    <id>http://yoursite.com/2018/06/04/PageName/</id>
    <published>2018-06-04T04:22:11.000Z</published>
    <updated>2018-06-04T04:22:11.429Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/10/hello-world/"/>
    <id>http://yoursite.com/2018/05/10/hello-world/</id>
    <published>2018-05-10T14:30:07.048Z</published>
    <updated>2018-05-23T10:06:01.157Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span> 哈哈  我的Hexo博客....要坚持</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
